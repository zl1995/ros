// Generated by gencpp from file comm/turtleMoveGoal.msg
// DO NOT EDIT!


#ifndef COMM_MESSAGE_TURTLEMOVEGOAL_H
#define COMM_MESSAGE_TURTLEMOVEGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace comm
{
template <class ContainerAllocator>
struct turtleMoveGoal_
{
  typedef turtleMoveGoal_<ContainerAllocator> Type;

  turtleMoveGoal_()
    : turtle_target_x(0.0)
    , turtle_target_y(0.0)
    , turtle_target_theta(0.0)  {
    }
  turtleMoveGoal_(const ContainerAllocator& _alloc)
    : turtle_target_x(0.0)
    , turtle_target_y(0.0)
    , turtle_target_theta(0.0)  {
  (void)_alloc;
    }



   typedef double _turtle_target_x_type;
  _turtle_target_x_type turtle_target_x;

   typedef double _turtle_target_y_type;
  _turtle_target_y_type turtle_target_y;

   typedef double _turtle_target_theta_type;
  _turtle_target_theta_type turtle_target_theta;





  typedef boost::shared_ptr< ::comm::turtleMoveGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::comm::turtleMoveGoal_<ContainerAllocator> const> ConstPtr;

}; // struct turtleMoveGoal_

typedef ::comm::turtleMoveGoal_<std::allocator<void> > turtleMoveGoal;

typedef boost::shared_ptr< ::comm::turtleMoveGoal > turtleMoveGoalPtr;
typedef boost::shared_ptr< ::comm::turtleMoveGoal const> turtleMoveGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::comm::turtleMoveGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::comm::turtleMoveGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::comm::turtleMoveGoal_<ContainerAllocator1> & lhs, const ::comm::turtleMoveGoal_<ContainerAllocator2> & rhs)
{
  return lhs.turtle_target_x == rhs.turtle_target_x &&
    lhs.turtle_target_y == rhs.turtle_target_y &&
    lhs.turtle_target_theta == rhs.turtle_target_theta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::comm::turtleMoveGoal_<ContainerAllocator1> & lhs, const ::comm::turtleMoveGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace comm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::comm::turtleMoveGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::comm::turtleMoveGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::comm::turtleMoveGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::comm::turtleMoveGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::comm::turtleMoveGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::comm::turtleMoveGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::comm::turtleMoveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d6ca75a13b0855b8f735f0fec295b281";
  }

  static const char* value(const ::comm::turtleMoveGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd6ca75a13b0855b8ULL;
  static const uint64_t static_value2 = 0xf735f0fec295b281ULL;
};

template<class ContainerAllocator>
struct DataType< ::comm::turtleMoveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "comm/turtleMoveGoal";
  }

  static const char* value(const ::comm::turtleMoveGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::comm::turtleMoveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the goal\n"
"float64 turtle_target_x  # Specify Turtle'sã€€target position\n"
"float64 turtle_target_y\n"
"float64 turtle_target_theta\n"
;
  }

  static const char* value(const ::comm::turtleMoveGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::comm::turtleMoveGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.turtle_target_x);
      stream.next(m.turtle_target_y);
      stream.next(m.turtle_target_theta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct turtleMoveGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::comm::turtleMoveGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::comm::turtleMoveGoal_<ContainerAllocator>& v)
  {
    s << indent << "turtle_target_x: ";
    Printer<double>::stream(s, indent + "  ", v.turtle_target_x);
    s << indent << "turtle_target_y: ";
    Printer<double>::stream(s, indent + "  ", v.turtle_target_y);
    s << indent << "turtle_target_theta: ";
    Printer<double>::stream(s, indent + "  ", v.turtle_target_theta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMM_MESSAGE_TURTLEMOVEGOAL_H
